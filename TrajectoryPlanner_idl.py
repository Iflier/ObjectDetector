# Python stubs generated by omniidl from idl/TrajectoryPlanner.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "BasicDataType.idl"
import BasicDataType_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")
# #include "ExtendedDataTypes.idl"
import ExtendedDataTypes_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")
# #include "InterfaceDataTypes.idl"
import InterfaceDataTypes_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")

#
# Start of module "Manipulation"
#
__name__ = "Manipulation"
_0_Manipulation = omniORB.openModule("Manipulation", r"idl/TrajectoryPlanner.idl")
_0_Manipulation__POA = omniORB.openModule("Manipulation__POA", r"idl/TrajectoryPlanner.idl")


# struct ObjectIdentifier
_0_Manipulation.ObjectIdentifier = omniORB.newEmptyClass()
class ObjectIdentifier (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Manipulation/ObjectIdentifier:1.0"

    def __init__(self, name):
        self.name = name

_0_Manipulation.ObjectIdentifier = ObjectIdentifier
_0_Manipulation._d_ObjectIdentifier  = (omniORB.tcInternal.tv_struct, ObjectIdentifier, ObjectIdentifier._NP_RepositoryId, "ObjectIdentifier", "name", (omniORB.tcInternal.tv_string,0))
_0_Manipulation._tc_ObjectIdentifier = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_ObjectIdentifier)
omniORB.registerType(ObjectIdentifier._NP_RepositoryId, _0_Manipulation._d_ObjectIdentifier, _0_Manipulation._tc_ObjectIdentifier)
del ObjectIdentifier

# struct ObjectInfo
_0_Manipulation.ObjectInfo = omniORB.newEmptyClass()
class ObjectInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Manipulation/ObjectInfo:1.0"

    def __init__(self, objectID, pose):
        self.objectID = objectID
        self.pose = pose

_0_Manipulation.ObjectInfo = ObjectInfo
_0_Manipulation._d_ObjectInfo  = (omniORB.tcInternal.tv_struct, ObjectInfo, ObjectInfo._NP_RepositoryId, "ObjectInfo", "objectID", omniORB.typeMapping["IDL:Manipulation/ObjectIdentifier:1.0"], "pose", omniORB.typeMapping["IDL:RTC/Pose3D:1.0"])
_0_Manipulation._tc_ObjectInfo = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_ObjectInfo)
omniORB.registerType(ObjectInfo._NP_RepositoryId, _0_Manipulation._d_ObjectInfo, _0_Manipulation._tc_ObjectInfo)
del ObjectInfo

# struct JointInfo
_0_Manipulation.JointInfo = omniORB.newEmptyClass()
class JointInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Manipulation/JointInfo:1.0"

    def __init__(self, name, jointAngle, jointDistance, linkLength, linkTwist, maxAngle, minAngle):
        self.name = name
        self.jointAngle = jointAngle
        self.jointDistance = jointDistance
        self.linkLength = linkLength
        self.linkTwist = linkTwist
        self.maxAngle = maxAngle
        self.minAngle = minAngle

_0_Manipulation.JointInfo = JointInfo
_0_Manipulation._d_JointInfo  = (omniORB.tcInternal.tv_struct, JointInfo, JointInfo._NP_RepositoryId, "JointInfo", "name", (omniORB.tcInternal.tv_string,0), "jointAngle", omniORB.tcInternal.tv_double, "jointDistance", omniORB.tcInternal.tv_double, "linkLength", omniORB.tcInternal.tv_double, "linkTwist", omniORB.tcInternal.tv_double, "maxAngle", omniORB.tcInternal.tv_double, "minAngle", omniORB.tcInternal.tv_double)
_0_Manipulation._tc_JointInfo = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_JointInfo)
omniORB.registerType(JointInfo._NP_RepositoryId, _0_Manipulation._d_JointInfo, _0_Manipulation._tc_JointInfo)
del JointInfo

# struct RobotJointInfo
_0_Manipulation.RobotJointInfo = omniORB.newEmptyClass()
class RobotJointInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Manipulation/RobotJointInfo:1.0"

    def __init__(self, jointInfoSeq):
        self.jointInfoSeq = jointInfoSeq

_0_Manipulation.RobotJointInfo = RobotJointInfo
_0_Manipulation._d_RobotJointInfo  = (omniORB.tcInternal.tv_struct, RobotJointInfo, RobotJointInfo._NP_RepositoryId, "RobotJointInfo", "jointInfoSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Manipulation/JointInfo:1.0"], 0))
_0_Manipulation._tc_RobotJointInfo = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_RobotJointInfo)
omniORB.registerType(RobotJointInfo._NP_RepositoryId, _0_Manipulation._d_RobotJointInfo, _0_Manipulation._tc_RobotJointInfo)
del RobotJointInfo

# struct RobotIdentifier
_0_Manipulation.RobotIdentifier = omniORB.newEmptyClass()
class RobotIdentifier (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Manipulation/RobotIdentifier:1.0"

    def __init__(self, name):
        self.name = name

_0_Manipulation.RobotIdentifier = RobotIdentifier
_0_Manipulation._d_RobotIdentifier  = (omniORB.tcInternal.tv_struct, RobotIdentifier, RobotIdentifier._NP_RepositoryId, "RobotIdentifier", "name", (omniORB.tcInternal.tv_string,0))
_0_Manipulation._tc_RobotIdentifier = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_RobotIdentifier)
omniORB.registerType(RobotIdentifier._NP_RepositoryId, _0_Manipulation._d_RobotIdentifier, _0_Manipulation._tc_RobotIdentifier)
del RobotIdentifier

# struct ManipulationPlan
_0_Manipulation.ManipulationPlan = omniORB.newEmptyClass()
class ManipulationPlan (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Manipulation/ManipulationPlan:1.0"

    def __init__(self, robotID, robotJointInfoSeq):
        self.robotID = robotID
        self.robotJointInfoSeq = robotJointInfoSeq

_0_Manipulation.ManipulationPlan = ManipulationPlan
_0_Manipulation._d_ManipulationPlan  = (omniORB.tcInternal.tv_struct, ManipulationPlan, ManipulationPlan._NP_RepositoryId, "ManipulationPlan", "robotID", omniORB.typeMapping["IDL:Manipulation/RobotIdentifier:1.0"], "robotJointInfoSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:Manipulation/RobotJointInfo:1.0"], 0))
_0_Manipulation._tc_ManipulationPlan = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_ManipulationPlan)
omniORB.registerType(ManipulationPlan._NP_RepositoryId, _0_Manipulation._d_ManipulationPlan, _0_Manipulation._tc_ManipulationPlan)
del ManipulationPlan

# struct CollisionInfo
_0_Manipulation.CollisionInfo = omniORB.newEmptyClass()
class CollisionInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Manipulation/CollisionInfo:1.0"

    def __init__(self, name):
        self.name = name

_0_Manipulation.CollisionInfo = CollisionInfo
_0_Manipulation._d_CollisionInfo  = (omniORB.tcInternal.tv_struct, CollisionInfo, CollisionInfo._NP_RepositoryId, "CollisionInfo", "name", (omniORB.tcInternal.tv_string,0))
_0_Manipulation._tc_CollisionInfo = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_CollisionInfo)
omniORB.registerType(CollisionInfo._NP_RepositoryId, _0_Manipulation._d_CollisionInfo, _0_Manipulation._tc_CollisionInfo)
del CollisionInfo

# struct MeshInfo
_0_Manipulation.MeshInfo = omniORB.newEmptyClass()
class MeshInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:Manipulation/MeshInfo:1.0"

    def __init__(self, name):
        self.name = name

_0_Manipulation.MeshInfo = MeshInfo
_0_Manipulation._d_MeshInfo  = (omniORB.tcInternal.tv_struct, MeshInfo, MeshInfo._NP_RepositoryId, "MeshInfo", "name", (omniORB.tcInternal.tv_string,0))
_0_Manipulation._tc_MeshInfo = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_MeshInfo)
omniORB.registerType(MeshInfo._NP_RepositoryId, _0_Manipulation._d_MeshInfo, _0_Manipulation._tc_MeshInfo)
del MeshInfo

# interface ObjectDetectionService
_0_Manipulation._d_ObjectDetectionService = (omniORB.tcInternal.tv_objref, "IDL:Manipulation/ObjectDetectionService:1.0", "ObjectDetectionService")
omniORB.typeMapping["IDL:Manipulation/ObjectDetectionService:1.0"] = _0_Manipulation._d_ObjectDetectionService
_0_Manipulation.ObjectDetectionService = omniORB.newEmptyClass()
class ObjectDetectionService :
    _NP_RepositoryId = _0_Manipulation._d_ObjectDetectionService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Manipulation.ObjectDetectionService = ObjectDetectionService
_0_Manipulation._tc_ObjectDetectionService = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_ObjectDetectionService)
omniORB.registerType(ObjectDetectionService._NP_RepositoryId, _0_Manipulation._d_ObjectDetectionService, _0_Manipulation._tc_ObjectDetectionService)

# ObjectDetectionService operations and attributes
ObjectDetectionService._d_detectObject = ((omniORB.typeMapping["IDL:Manipulation/ObjectIdentifier:1.0"], ), (omniORB.typeMapping["IDL:Manipulation/ObjectInfo:1.0"], ), None)
ObjectDetectionService._d_setGeometry = ((omniORB.typeMapping["IDL:RTC/Geometry3D:1.0"], ), (), None)

# ObjectDetectionService object reference
class _objref_ObjectDetectionService (CORBA.Object):
    _NP_RepositoryId = ObjectDetectionService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def detectObject(self, *args):
        return _omnipy.invoke(self, "detectObject", _0_Manipulation.ObjectDetectionService._d_detectObject, args)

    def setGeometry(self, *args):
        return _omnipy.invoke(self, "setGeometry", _0_Manipulation.ObjectDetectionService._d_setGeometry, args)

    __methods__ = ["detectObject", "setGeometry"] + CORBA.Object.__methods__

omniORB.registerObjref(ObjectDetectionService._NP_RepositoryId, _objref_ObjectDetectionService)
_0_Manipulation._objref_ObjectDetectionService = _objref_ObjectDetectionService
del ObjectDetectionService, _objref_ObjectDetectionService

# ObjectDetectionService skeleton
__name__ = "Manipulation__POA"
class ObjectDetectionService (PortableServer.Servant):
    _NP_RepositoryId = _0_Manipulation.ObjectDetectionService._NP_RepositoryId


    _omni_op_d = {"detectObject": _0_Manipulation.ObjectDetectionService._d_detectObject, "setGeometry": _0_Manipulation.ObjectDetectionService._d_setGeometry}

ObjectDetectionService._omni_skeleton = ObjectDetectionService
_0_Manipulation__POA.ObjectDetectionService = ObjectDetectionService
omniORB.registerSkeleton(ObjectDetectionService._NP_RepositoryId, ObjectDetectionService)
del ObjectDetectionService
__name__ = "Manipulation"

# interface KinematicsSolverService
_0_Manipulation._d_KinematicsSolverService = (omniORB.tcInternal.tv_objref, "IDL:Manipulation/KinematicsSolverService:1.0", "KinematicsSolverService")
omniORB.typeMapping["IDL:Manipulation/KinematicsSolverService:1.0"] = _0_Manipulation._d_KinematicsSolverService
_0_Manipulation.KinematicsSolverService = omniORB.newEmptyClass()
class KinematicsSolverService :
    _NP_RepositoryId = _0_Manipulation._d_KinematicsSolverService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Manipulation.KinematicsSolverService = KinematicsSolverService
_0_Manipulation._tc_KinematicsSolverService = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_KinematicsSolverService)
omniORB.registerType(KinematicsSolverService._NP_RepositoryId, _0_Manipulation._d_KinematicsSolverService, _0_Manipulation._tc_KinematicsSolverService)

# KinematicsSolverService operations and attributes
KinematicsSolverService._d_solveInverseKinematics = ((omniORB.typeMapping["IDL:Manipulation/ObjectInfo:1.0"], ), (omniORB.typeMapping["IDL:Manipulation/RobotJointInfo:1.0"], ), None)

# KinematicsSolverService object reference
class _objref_KinematicsSolverService (CORBA.Object):
    _NP_RepositoryId = KinematicsSolverService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def solveInverseKinematics(self, *args):
        return _omnipy.invoke(self, "solveInverseKinematics", _0_Manipulation.KinematicsSolverService._d_solveInverseKinematics, args)

    __methods__ = ["solveInverseKinematics"] + CORBA.Object.__methods__

omniORB.registerObjref(KinematicsSolverService._NP_RepositoryId, _objref_KinematicsSolverService)
_0_Manipulation._objref_KinematicsSolverService = _objref_KinematicsSolverService
del KinematicsSolverService, _objref_KinematicsSolverService

# KinematicsSolverService skeleton
__name__ = "Manipulation__POA"
class KinematicsSolverService (PortableServer.Servant):
    _NP_RepositoryId = _0_Manipulation.KinematicsSolverService._NP_RepositoryId


    _omni_op_d = {"solveInverseKinematics": _0_Manipulation.KinematicsSolverService._d_solveInverseKinematics}

KinematicsSolverService._omni_skeleton = KinematicsSolverService
_0_Manipulation__POA.KinematicsSolverService = KinematicsSolverService
omniORB.registerSkeleton(KinematicsSolverService._NP_RepositoryId, KinematicsSolverService)
del KinematicsSolverService
__name__ = "Manipulation"

# interface CollisionDetectionService
_0_Manipulation._d_CollisionDetectionService = (omniORB.tcInternal.tv_objref, "IDL:Manipulation/CollisionDetectionService:1.0", "CollisionDetectionService")
omniORB.typeMapping["IDL:Manipulation/CollisionDetectionService:1.0"] = _0_Manipulation._d_CollisionDetectionService
_0_Manipulation.CollisionDetectionService = omniORB.newEmptyClass()
class CollisionDetectionService :
    _NP_RepositoryId = _0_Manipulation._d_CollisionDetectionService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Manipulation.CollisionDetectionService = CollisionDetectionService
_0_Manipulation._tc_CollisionDetectionService = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_CollisionDetectionService)
omniORB.registerType(CollisionDetectionService._NP_RepositoryId, _0_Manipulation._d_CollisionDetectionService, _0_Manipulation._tc_CollisionDetectionService)

# CollisionDetectionService operations and attributes
CollisionDetectionService._d_isCollide = ((omniORB.typeMapping["IDL:Manipulation/RobotIdentifier:1.0"], omniORB.typeMapping["IDL:Manipulation/RobotJointInfo:1.0"]), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:Manipulation/CollisionInfo:1.0"]), None)

# CollisionDetectionService object reference
class _objref_CollisionDetectionService (CORBA.Object):
    _NP_RepositoryId = CollisionDetectionService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def isCollide(self, *args):
        return _omnipy.invoke(self, "isCollide", _0_Manipulation.CollisionDetectionService._d_isCollide, args)

    __methods__ = ["isCollide"] + CORBA.Object.__methods__

omniORB.registerObjref(CollisionDetectionService._NP_RepositoryId, _objref_CollisionDetectionService)
_0_Manipulation._objref_CollisionDetectionService = _objref_CollisionDetectionService
del CollisionDetectionService, _objref_CollisionDetectionService

# CollisionDetectionService skeleton
__name__ = "Manipulation__POA"
class CollisionDetectionService (PortableServer.Servant):
    _NP_RepositoryId = _0_Manipulation.CollisionDetectionService._NP_RepositoryId


    _omni_op_d = {"isCollide": _0_Manipulation.CollisionDetectionService._d_isCollide}

CollisionDetectionService._omni_skeleton = CollisionDetectionService
_0_Manipulation__POA.CollisionDetectionService = CollisionDetectionService
omniORB.registerSkeleton(CollisionDetectionService._NP_RepositoryId, CollisionDetectionService)
del CollisionDetectionService
__name__ = "Manipulation"

# interface ManipulationPlannerService
_0_Manipulation._d_ManipulationPlannerService = (omniORB.tcInternal.tv_objref, "IDL:Manipulation/ManipulationPlannerService:1.0", "ManipulationPlannerService")
omniORB.typeMapping["IDL:Manipulation/ManipulationPlannerService:1.0"] = _0_Manipulation._d_ManipulationPlannerService
_0_Manipulation.ManipulationPlannerService = omniORB.newEmptyClass()
class ManipulationPlannerService :
    _NP_RepositoryId = _0_Manipulation._d_ManipulationPlannerService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Manipulation.ManipulationPlannerService = ManipulationPlannerService
_0_Manipulation._tc_ManipulationPlannerService = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_ManipulationPlannerService)
omniORB.registerType(ManipulationPlannerService._NP_RepositoryId, _0_Manipulation._d_ManipulationPlannerService, _0_Manipulation._tc_ManipulationPlannerService)

# ManipulationPlannerService operations and attributes
ManipulationPlannerService._d_planManipulation = ((omniORB.typeMapping["IDL:Manipulation/RobotIdentifier:1.0"], omniORB.typeMapping["IDL:Manipulation/RobotJointInfo:1.0"], omniORB.typeMapping["IDL:Manipulation/RobotJointInfo:1.0"]), (omniORB.typeMapping["IDL:Manipulation/ManipulationPlan:1.0"], ), None)

# ManipulationPlannerService object reference
class _objref_ManipulationPlannerService (CORBA.Object):
    _NP_RepositoryId = ManipulationPlannerService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def planManipulation(self, *args):
        return _omnipy.invoke(self, "planManipulation", _0_Manipulation.ManipulationPlannerService._d_planManipulation, args)

    __methods__ = ["planManipulation"] + CORBA.Object.__methods__

omniORB.registerObjref(ManipulationPlannerService._NP_RepositoryId, _objref_ManipulationPlannerService)
_0_Manipulation._objref_ManipulationPlannerService = _objref_ManipulationPlannerService
del ManipulationPlannerService, _objref_ManipulationPlannerService

# ManipulationPlannerService skeleton
__name__ = "Manipulation__POA"
class ManipulationPlannerService (PortableServer.Servant):
    _NP_RepositoryId = _0_Manipulation.ManipulationPlannerService._NP_RepositoryId


    _omni_op_d = {"planManipulation": _0_Manipulation.ManipulationPlannerService._d_planManipulation}

ManipulationPlannerService._omni_skeleton = ManipulationPlannerService
_0_Manipulation__POA.ManipulationPlannerService = ManipulationPlannerService
omniORB.registerSkeleton(ManipulationPlannerService._NP_RepositoryId, ManipulationPlannerService)
del ManipulationPlannerService
__name__ = "Manipulation"

# interface ModelServerService
_0_Manipulation._d_ModelServerService = (omniORB.tcInternal.tv_objref, "IDL:Manipulation/ModelServerService:1.0", "ModelServerService")
omniORB.typeMapping["IDL:Manipulation/ModelServerService:1.0"] = _0_Manipulation._d_ModelServerService
_0_Manipulation.ModelServerService = omniORB.newEmptyClass()
class ModelServerService :
    _NP_RepositoryId = _0_Manipulation._d_ModelServerService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Manipulation.ModelServerService = ModelServerService
_0_Manipulation._tc_ModelServerService = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_ModelServerService)
omniORB.registerType(ModelServerService._NP_RepositoryId, _0_Manipulation._d_ModelServerService, _0_Manipulation._tc_ModelServerService)

# ModelServerService operations and attributes
ModelServerService._d_getModelInfo = ((omniORB.typeMapping["IDL:Manipulation/RobotIdentifier:1.0"], ), (omniORB.typeMapping["IDL:Manipulation/RobotJointInfo:1.0"], ), None)
ModelServerService._d_getMeshInfo = ((omniORB.typeMapping["IDL:Manipulation/RobotIdentifier:1.0"], ), (omniORB.typeMapping["IDL:Manipulation/MeshInfo:1.0"], ), None)

# ModelServerService object reference
class _objref_ModelServerService (CORBA.Object):
    _NP_RepositoryId = ModelServerService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def getModelInfo(self, *args):
        return _omnipy.invoke(self, "getModelInfo", _0_Manipulation.ModelServerService._d_getModelInfo, args)

    def getMeshInfo(self, *args):
        return _omnipy.invoke(self, "getMeshInfo", _0_Manipulation.ModelServerService._d_getMeshInfo, args)

    __methods__ = ["getModelInfo", "getMeshInfo"] + CORBA.Object.__methods__

omniORB.registerObjref(ModelServerService._NP_RepositoryId, _objref_ModelServerService)
_0_Manipulation._objref_ModelServerService = _objref_ModelServerService
del ModelServerService, _objref_ModelServerService

# ModelServerService skeleton
__name__ = "Manipulation__POA"
class ModelServerService (PortableServer.Servant):
    _NP_RepositoryId = _0_Manipulation.ModelServerService._NP_RepositoryId


    _omni_op_d = {"getModelInfo": _0_Manipulation.ModelServerService._d_getModelInfo, "getMeshInfo": _0_Manipulation.ModelServerService._d_getMeshInfo}

ModelServerService._omni_skeleton = ModelServerService
_0_Manipulation__POA.ModelServerService = ModelServerService
omniORB.registerSkeleton(ModelServerService._NP_RepositoryId, ModelServerService)
del ModelServerService
__name__ = "Manipulation"

# interface MotionGeneratorService
_0_Manipulation._d_MotionGeneratorService = (omniORB.tcInternal.tv_objref, "IDL:Manipulation/MotionGeneratorService:1.0", "MotionGeneratorService")
omniORB.typeMapping["IDL:Manipulation/MotionGeneratorService:1.0"] = _0_Manipulation._d_MotionGeneratorService
_0_Manipulation.MotionGeneratorService = omniORB.newEmptyClass()
class MotionGeneratorService :
    _NP_RepositoryId = _0_Manipulation._d_MotionGeneratorService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Manipulation.MotionGeneratorService = MotionGeneratorService
_0_Manipulation._tc_MotionGeneratorService = omniORB.tcInternal.createTypeCode(_0_Manipulation._d_MotionGeneratorService)
omniORB.registerType(MotionGeneratorService._NP_RepositoryId, _0_Manipulation._d_MotionGeneratorService, _0_Manipulation._tc_MotionGeneratorService)

# MotionGeneratorService operations and attributes
MotionGeneratorService._d_followManipPlan = ((omniORB.typeMapping["IDL:Manipulation/ManipulationPlan:1.0"], ), (), None)
MotionGeneratorService._d_getCurrentRobotJointInfo = ((omniORB.typeMapping["IDL:Manipulation/RobotIdentifier:1.0"], ), (omniORB.typeMapping["IDL:Manipulation/RobotJointInfo:1.0"], ), None)

# MotionGeneratorService object reference
class _objref_MotionGeneratorService (CORBA.Object):
    _NP_RepositoryId = MotionGeneratorService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def followManipPlan(self, *args):
        return _omnipy.invoke(self, "followManipPlan", _0_Manipulation.MotionGeneratorService._d_followManipPlan, args)

    def getCurrentRobotJointInfo(self, *args):
        return _omnipy.invoke(self, "getCurrentRobotJointInfo", _0_Manipulation.MotionGeneratorService._d_getCurrentRobotJointInfo, args)

    __methods__ = ["followManipPlan", "getCurrentRobotJointInfo"] + CORBA.Object.__methods__

omniORB.registerObjref(MotionGeneratorService._NP_RepositoryId, _objref_MotionGeneratorService)
_0_Manipulation._objref_MotionGeneratorService = _objref_MotionGeneratorService
del MotionGeneratorService, _objref_MotionGeneratorService

# MotionGeneratorService skeleton
__name__ = "Manipulation__POA"
class MotionGeneratorService (PortableServer.Servant):
    _NP_RepositoryId = _0_Manipulation.MotionGeneratorService._NP_RepositoryId


    _omni_op_d = {"followManipPlan": _0_Manipulation.MotionGeneratorService._d_followManipPlan, "getCurrentRobotJointInfo": _0_Manipulation.MotionGeneratorService._d_getCurrentRobotJointInfo}

MotionGeneratorService._omni_skeleton = MotionGeneratorService
_0_Manipulation__POA.MotionGeneratorService = MotionGeneratorService
omniORB.registerSkeleton(MotionGeneratorService._NP_RepositoryId, MotionGeneratorService)
del MotionGeneratorService
__name__ = "Manipulation"

#
# End of module "Manipulation"
#
__name__ = "TrajectoryPlanner_idl"

_exported_modules = ( "Manipulation", )

# The end.
